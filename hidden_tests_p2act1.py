def sol_collatz_sequence(x):
    """Function that generates the Collatz Sequence starting from a given positive integer until 1 is reached.
    
    Parameters:
        x (int): The starting integer

    Returns:
        sequence (list[int]): A list of integers generated by the Collatz procedure. 
    """
    sequence = [float(x)]
    while True:
        if x == 1:
            break
        elif x%2==0:
            x = x/2
        else:
            x = x*3+1
        sequence.append(x)
    return sequence

def input_collatz_sequence(num_tests=15):
    return ([[] for i in range(num_tests)], [{"x":float(i)} for i in range(2, 2+num_tests)])

def sol_triangle_numbers(x):
    ### BEGIN SOLUTION
    t = 0
    count = 1
    while t<x:
        print(t)
        t += count
        count+=1
    return

def input_triangle_numbers(num_tests=15):
    return ([[] for i in range(num_tests)], [{"x":float(i)} for i in range(1, 1+num_tests)])

def sol_list_digits(x):
    ### BEGIN SOLUTION
    digits = []
    while x>0:
        digits.append(x%10)
        x = x//10
    return digits

def input_list_digits(num_tests=25):
    from random import randint
    return ([[] for i in range(num_tests)], [{'x':randint(100, 10000)} for i in range(num_tests)])

def sol_digit_root(x):
    """Function that calculates and returns the digit root of x.
    
    Parameters:
        x (int): a number to obtain its digit root
    
    Returns:
        d_root (int): the digit root of x, always a number between 0-9.
    """
    ### BEGIN SOLUTION
    digits = sol_list_digits(x)
    d_root = sum(digits)
    while d_root>9:
        digits = sol_list_digits(d_root)
        d_root = sum(digits)
    return d_root

def input_digit_root(num_tests=25):
    from random import randint
    return ([[] for i in range(num_tests)], [{'x':randint(10000, 10000000)} for i in range(num_tests)])
